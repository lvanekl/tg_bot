import json
import random

import asyncio
import logging
import openai

from db.db_class import DB
from env import openai_token
from datetime import date as Date, time as Time

openai.api_key = openai_token

default_prompt = '''–Ø –∑–∞–Ω–∏–º–∞—é—Å—å –≤ —Å–ø–æ—Ä—Ç—Å–µ–∫—Ü–∏–∏ –∏ —è –ø—Ä–æ–≤–æ–∂—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, 
—á—Ç–æ–±—ã –ª—é–¥–∏ –º–æ–≥–ª–∏ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä—É—é—Ç –ª–∏ –æ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–π—Ç–∏. –ü–æ —Å–º—ã—Å–ª—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–µ: –¥–∞, –Ω–µ—Ç, –Ω–µ –∑–Ω–∞—é. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–º–µ–Ω—ã —ç—Ç–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –æ—Ç–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã –æ–ø—Ä–æ—Å—ã –Ω–µ –±—ã–ª–∏ –æ–¥–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏. –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –¥—Ä—É–∂–µ—Å–∫–∞—è –∏ –≤ —á–∞—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è –ø–æ–¥–∫–æ–ª—ã –≤–ø–ª–æ—Ç—å –¥–æ —Å–∞–º—ã—Ö –∂–µ—Å—Ç–∫–∏—Ö. 
–ù—É–∂–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à—É—Ç–ª–∏–≤–æ–π —Ñ–æ—Ä–º–µ - –≤—ã–¥–∞–≤–∞–π —Å–∞–º—ã–µ –∞–±—Å—É—Ä–¥–Ω—ã–µ –∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ö–∞–∫ –º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ –ø–∞—Ñ–æ—Å–∞.
–ó–∞–ø—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã: —Ç—Ä–µ–Ω–µ—Ä, –ø–æ—Ç, –ø–æ–¥—Ä—É–∂–∫–∏, –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞, —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫, –∂–µ–ª–µ–∑–æ, —à–µ—Å—Ç, –≤—Å–ø–ª—ã—Ç—å, –æ–¥–Ω–∞ —Ä—É–∫–∞, –≤–µ—Å, —Ñ—É—Ç–±–æ–ª. –Ø —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ json:
{"question": ["", "", ""], "yes": ["", "", ""], "maybe": ["", "", ""], "no": ["", "", ""], ]}. 
–í–æ—Ç —Ç–µ–±–µ –ø—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤,  {
  "–¥–∞": [
    "–Ø –ø—Ä–∏–¥—É –∏ –ø–æ–∫–∞–∂—É –≤—Å–µ–º, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ, –¥–µ—Ä–∂–∞ –±—É—Ç–µ—Ä–±—Ä–æ–¥ –≤ –¥—Ä—É–≥–æ–π",
    "–î–∞, —Å–µ–≥–æ–¥–Ω—è —è –±—É–¥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —ç–ø–æ–ø–µ–µ!",
    "–î–∞, —è –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫ —Å–µ—Ä—å–µ–∑–Ω–æ, —á—Ç–æ –º–æ–∏ –º—ã—à—Ü—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –Ω–∞–±–∏—Ä–∞—Ç—å –º–∞—Å—Å—É, —Ç–æ–ª—å–∫–æ –¥—É–º–∞—è –æ–± —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!",
  ],
  "–Ω–µ—Ç": [
    "–ù–µ —Å–µ–≥–æ–¥–Ω—è, —è —Ä–µ—à–∏–ª(–∞) –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ —á–∏–ø—Å–æ–≤–æ–µ –ª–µ–∂–µ–±–æ–∫–æ",
    "–ù–µ—Ç, —è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –æ–±—ä—è–≤–ª—è—é —Å–µ–±—è —á–µ–º–ø–∏–æ–Ω–æ–º –ø–æ —Å–æ–≤–º–µ—â–µ–Ω–∏—é –¥–∏–≤–∞–Ω–Ω–æ–π –∏ —Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏",
    "–Ø —Å–æ–±–∏—Ä–∞—é—Å—å —Å–∏–¥–µ—Ç—å –∏ –≤—ã–Ω–∞—à–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –≤ –ø–æ–∫–æ–µ.",
    "–ù–µ—Ç, –º–æ—è —ç–Ω–µ—Ä–≥–∏—è –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–ø–∫–æ—Ä–Ω–∞ –≤ —Å–≤–æ–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º–µ.",
    "–°–µ–≥–æ–¥–Ω—è —è –Ω–µ –ø—Ä–∏–¥—É, –ø–æ—Ç–æ–º—É —á—Ç–æ –º–µ–Ω—è –ø–æ—Ö–∏—Ç–∏–ª–∏ –ø—Ä–∏—à–µ–ª—å—Ü—ã –∏ –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç, —á—Ç–æ–±—ã —è –∏–º –ø–æ–∫–∞–∑–∞–ª, –∫–∞–∫ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
    "–ù–µ—Ç, —Å–µ–≥–æ–¥–Ω—è —è –∑–∞–Ω—è—Ç —á–µ–º-—Ç–æ –Ω–µ–Ω—É–∂–Ω—ã–º –∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º".
  ],
  "–Ω–µ –∑–Ω–∞—é": [
    "–Ø –Ω–∞ –≥—Ä–∞–Ω–∏ —Ä–µ—à–µ–Ω–∏—è –º–µ–∂–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –∏ –∑–∞–Ω—è—Ç–∏–µ–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –ø–æ–¥—É—à–µ—á–Ω–æ–≥–æ –±–æ—è",
    "–ú–æ—è –ø—Ä–µ–¥–≤—ã–±–æ—Ä–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –º–µ–∂–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –∏ –æ—Ç–¥—ã—Ö–æ–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–±–µ–¥—ã –∞–ø–∞—Ç–∏–∏ –∏–ª–∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞."
  ]
}

–ù–û –ò–• –¢–ï–ë–ï –ö–û–ü–ò–†–û–í–ê–¢–¨ –ù–ï–õ–¨–ó–Ø. –ü—Ä–∏–¥—É–º–∞–π —Å–∞–º, –º–Ω–µ –Ω—É–∂–Ω—ã –∏–º–µ–Ω–Ω–æ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Ä–µ—á–µ–≤—ã–µ –æ—à–∏–±–∫–∏.'''


async def generate_poll(telegram_chat_id: int, chat_settings: dict, training: dict, my_db: DB) -> dict:
    print('hehehe')
    date, time, gym, sport = training['date'], training['time'], training['gym'], training['sport']

    funny_question, funny_yes_option, funny_maybe_option, funny_no_option, emoji = \
        chat_settings["funny_question"], chat_settings["funny_yes"], \
            chat_settings["funny_maybe"], chat_settings["funny_no"], chat_settings["emoji"]

    if any([funny_question, funny_yes_option, funny_maybe_option, funny_no_option]):
        loop = asyncio.get_event_loop()
        poll_variants = generate_poll_variants_using_chat_GPT(date, time, gym, sport)
        try:
            poll_variants = eval(poll_variants)
        except Exception as e:
            logging.error(e)
            poll_variants = {}
    else:
        poll_variants = await generate_poll_variants_using_db(telegram_chat_id, my_db=my_db)

    poll = choose_poll_variant(poll_variants)

    if emoji:
        poll = add_emoji(poll)

    if any([funny_question, funny_yes_option, funny_maybe_option, funny_no_option]):
        if funny_question:
            poll["question"] += f" ({date}, {time}, {gym})"
        else:
            poll["question"] = generate_default_question(date=date, time=time, gym=gym)

        if not funny_yes_option:
            poll["options"][0] = generate_default_yes_option(date=date, time=time, gym=gym)
        if not funny_maybe_option:
            poll["options"][1] = generate_default_maybe_option(date=date, time=time, gym=gym)
        if not funny_no_option:
            poll["options"][2] = generate_default_no_option(date=date, time=time, gym=gym)

    return poll


def generate_poll_variants_using_chat_GPT(date: Date, time: Time, gym: str, sport: str = "–ª—é–±–æ–π") -> str:
    prompt = default_prompt
    if sport is not None:
        prompt += f". –í–ê–ñ–ù–û: –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ - {sport}, –ø–æ—ç—Ç–æ–º—É –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. " \
                  f"–ö—Å—Ç–∞—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç {date} –≤ {time} –≤ –∑–∞–ª–µ {gym} - –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å, " \
                  f"–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö"

    response = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}],
                                            max_tokens=2700)
    response = str(response)
    return json.loads(response)["choices"][0]["message"]["content"]


async def generate_poll_variants_using_db(telegram_chat_id: int, my_db: DB) -> dict:
    answer_alternatives_grouped_by_types = \
        await my_db.get_answer_alternatives_grouped_by_types(telegram_chat_id=telegram_chat_id)

    return answer_alternatives_grouped_by_types


def choose_poll_variant(poll_variants: dict) -> dict:
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è poll_variants.get("–∫–ª—é—á", ["..."]) –Ω—É–∂–Ω–∞,
    # —á—Ç–æ–±—ã –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –æ–ø—Ä–æ—Å –Ω–µ –ø–æ–ª–æ–º–∞–ª—Å—è
    question = random.choice(poll_variants.get("question", ["–ò–¥–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"]))
    yes_option = random.choice(poll_variants.get("yes", ["–ü–ª–∞–Ω–∏—Ä—É—é"]))
    maybe_option = random.choice(poll_variants.get("maybe", ["–í–æ–∑–º–æ–∂–Ω–æ"]))
    no_option = random.choice(poll_variants.get("no", ["–ù–µ—Ç("]))

    return {"question": question, "options": [yes_option, maybe_option, no_option]}


def add_emoji(poll_variants: dict) -> dict:
    emoji_variants = ["‚úÖüåÄüí§",
                      "ü•≥üßêü´°",
                      "üëç‚úåÔ∏èüëã",
                      "üòéüòêü´•",
                      "‚ù§Ô∏è‚ùìüíî",
                      "üíØ‚ùì‚ÅâÔ∏è", ]
    em = random.choice(emoji_variants)

    poll_variants["options"][0] = em[0] + poll_variants["options"][0]
    poll_variants["options"][1] = em[1] + poll_variants["options"][1]
    poll_variants["options"][2] = em[2] + poll_variants["options"][2]

    return poll_variants


def generate_default_question(date: Date, time: Time, gym: str) -> str:
    templates = [f"–ü—Ä–∏–π–¥–µ—Ç–µ {date} –≤ {time} –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ {gym}?",
                 f"–ö–∞–∫ –Ω–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ {gym} ({date} –≤ {time})?",
                 f"–ü–µ—Ä–µ–∫–ª–∏—á–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ {gym} ({date} –≤ {time})?",
                 f"–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä {date}? –ï—Å—Ç—å –æ–ø—Ü–∏—è —Å–æ–±—Ä–∞—Ç—å—Å—è –≤ {gym} –≤ {time}"]

    return random.choice(templates)


def generate_default_yes_option(date: Date, time: Time, gym: str) -> str:
    templates = [f"–¢—Ä–µ–Ω–∏—Ä—É—é—Å—å –≤ {gym}",
                 f"–ü—Ä–∏–π–¥—É",
                 f"+1",
                 f"–ü–æ–¥–¥–µ—Ä–∂—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–≤–æ–∏–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º"]

    return random.choice(templates)


def generate_default_no_option(date: Date, time: Time, gym: str) -> str:
    templates = [f"–ù–µ –ø—Ä–∏–π–¥—É",
                 f"–ó–∞–Ω—è—Ç —á–µ–º-—Ç–æ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º –∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–º",
                 f"–Ø —É–∂–∞—Å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –∏ –Ω–µ –∏–¥—É —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
                 f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
                 "–ù–∞—à–µ–ª –ø—Ä–∏—á–∏–Ω—É –Ω–µ –∏–¥—Ç–∏ —Å–µ–≥–æ–¥–Ω—è (–¥–æ–ª–≥–æ –∏—Å–∫–∞–ª - –ø—Ä–∏—à–ª–æ—Å—å –ø—Ä–∏–¥—É–º–∞—Ç—å)"]

    return random.choice(templates)


def generate_default_maybe_option(date: Date, time: Time, gym: str) -> str:
    templates = [f"–ü–æ–∫–∞ –≤ —Ä–∞–∑–¥—É–º—å—è—Ö",
                 f"–ï—â–µ –Ω–µ —Ä–µ—à–∏–ª",
                 f"—Ö–∑",
                 f"–ú–æ–π –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –∏ –æ—Ç–¥—ã—Ö–æ–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–±–µ–¥—ã –∞–ø–∞—Ç–∏–∏ –∏–ª–∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞"]

    return random.choice(templates)


async def main():
    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    db_path = ...
    my_db = DB(db_path)

    telegram_chat_id = 1111
    chat_settings = {"chat_GPT": True, "funny_question": True, "funny_yes": True, "funny_maybe": True,
                     "funny_no": True, "emoji": True}
    date = Date.today()
    time = Time(hour=19, minute=34)
    gym = "–ê–∫—Ä–æ—Ä–∏—Ç–º"
    sport = "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞"

    training = {"date": date, "time": time, "gym": gym, "sport": sport}

    my_db.clear_all_tables()
    await my_db.new_chat(telegram_chat_id)
    await my_db.add_answer_alternative(telegram_chat_id=telegram_chat_id, answer_type="question",
                                       answer_value="–ü—Ä–∏–¥–µ—Ç–µ?")
    await my_db.add_answer_alternative(telegram_chat_id=telegram_chat_id, answer_type="yes", answer_value="–î–∞")
    await my_db.add_answer_alternative(telegram_chat_id=telegram_chat_id, answer_type="maybe", answer_value="–ú–±")
    await my_db.add_answer_alternative(telegram_chat_id=telegram_chat_id, answer_type="no", answer_value="–ù–µ—Ç")

    print(await generate_poll(telegram_chat_id,
                              chat_settings=chat_settings, training=training, db_path=db_path))
    my_db.clear_all_tables()


if __name__ == "__main__":
    main()
